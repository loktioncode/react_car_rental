{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Ras\\\\Documents\\\\GitHub\\\\car_rental_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ras\\\\Documents\\\\GitHub\\\\car_rental_app\\\\src\\\\Garage.js\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\nimport Car from './Car'; //this below is our component that returns JSX to index.html \n\nconst App = () => {\n  //arrow function \n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        recipes = _useState2[0],\n        setRecipes = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        search = _useState4[0],\n        setSearch = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        query = _useState6[0],\n        setQuery = _useState6[1];\n\n  const APP_ID = \"2bab79b6\";\n  const APP_KEY = \"c1d160425afb987dbf03072f5969f971\";\n  const URL = \"https://api.edamam.com/search?q=\".concat(query, \"&app_id=\").concat(APP_ID, \"&app_key=\").concat(APP_KEY);\n\n  const getRecipes = async () => {\n    const response = await fetch(URL);\n    const data = await response.json(); //the line below adds data.hits array to state set Recipes\n\n    setRecipes(data.hits); //data.hit pulls out hits from data fetched from api cz thats where our recipes are\n\n    console.log(data.hits);\n  }; //This function takes an arrow fuction\n  //it helps as it will run only once wen the page opens or is refreshed\n  //page is renderd only once because we add 2nd agr to the function which is [] and if empty this funct only runs once\n\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]); // wecan add state in the 2nd arg [] to tell react to refresh when when state is in curtain condition. eg True or False\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }; //the below funct is going to capture query from form input\n\n\n  const getSearch = e => {\n    e.preventDefault(); //prevents page reload after form submission\n\n    setQuery(search);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"search-form\",\n    onSubmit: getSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"search-bar\",\n    type: \"text\",\n    value: search,\n    onChange: updateSearch,\n    placeholder: \"Search Recipe\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: useEffect,\n    className: \"search-btn\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" Search Recipe\")), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"recipes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, recipes.map(recipe => //we are mapping through state to get individual recipe then render Recipe with all info frm api call         \n  React.createElement(Recipe // Recipe component\n  , {\n    key: recipe.recipe.label,\n    title: recipe.recipe.label,\n    image: recipe.recipe.image,\n    calories: recipe.recipe.calories,\n    ingridients: recipe.recipe.ingredients //this is an array of ingridients\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), \";\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Ras\\Documents\\GitHub\\car_rental_app\\src\\Garage.js"],"names":["React","useState","Link","axios","Car","App","recipes","setRecipes","search","setSearch","query","setQuery","APP_ID","APP_KEY","URL","getRecipes","response","fetch","data","json","hits","console","log","useEffect","updateSearch","e","target","value","getSearch","preventDefault","map","recipe","label","image","calories","ingredients"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CAGA;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAE;AAAF,oBAEgBJ,QAAQ,CAAC,EAAD,CAFxB;AAAA;AAAA,QAEPK,OAFO;AAAA,QAEEC,UAFF;;AAAA,qBAGcN,QAAQ,CAAC,EAAD,CAHtB;AAAA;AAAA,QAGPO,MAHO;AAAA,QAGCC,SAHD;;AAAA,qBAIYR,QAAQ,CAAC,EAAD,CAJpB;AAAA;AAAA,QAIPS,KAJO;AAAA,QAIAC,QAJA;;AAOd,QAAMC,MAAM,GAAG,UAAf;AACA,QAAMC,OAAO,GAAG,kCAAhB;AACA,QAAMC,GAAG,6CAAsCJ,KAAtC,qBAAsDE,MAAtD,sBAAwEC,OAAxE,CAAT;;AAGA,QAAME,UAAU,GAAG,YAAY;AAC3B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACA,UAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAF2B,CAI3B;;AACAZ,IAAAA,UAAU,CAACW,IAAI,CAACE,IAAN,CAAV,CAL2B,CAKJ;;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACE,IAAjB;AACH,GAPD,CAZc,CAsBd;AACA;AACA;;;AACAG,EAAAA,SAAS,CAAC,MAAM;AACZR,IAAAA,UAAU;AACb,GAFQ,EAEN,CAACL,KAAD,CAFM,CAAT,CAzBc,CA2BD;;AAGb,QAAMc,YAAY,GAAGC,CAAC,IAAG;AACrBhB,IAAAA,SAAS,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACH,GAFD,CA9Bc,CAkCd;;;AACA,QAAMC,SAAS,GAAGH,CAAC,IAAI;AACnBA,IAAAA,CAAC,CAACI,cAAF,GADmB,CACC;;AACpBlB,IAAAA,QAAQ,CAACH,MAAD,CAAR;AACH,GAHD;;AAMA,SACI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAM,IAAA,SAAS,EAAC,aAAhB;AAA8B,IAAA,QAAQ,EAAEoB,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,YAAjB;AAA8B,IAAA,IAAI,EAAC,MAAnC;AAA0C,IAAA,KAAK,EAAEpB,MAAjD;AAAyD,IAAA,QAAQ,EAAEgB,YAAnE;AAAiF,IAAA,WAAW,EAAC,eAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAED,SAAjB;AAA4B,IAAA,SAAS,EAAC,YAAtC;AAAmD,IAAA,IAAI,EAAC,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,CAFJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAQI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjB,OAAO,CAACwB,GAAR,CAAaC,MAAM,IAAQ;AAE5B,sBAAC,MAAD,CAAQ;AAAR;AACA,IAAA,GAAG,EAAEA,MAAM,CAACA,MAAP,CAAcC,KADnB;AAEA,IAAA,KAAK,EAAED,MAAM,CAACA,MAAP,CAAcC,KAFrB;AAGA,IAAA,KAAK,EAAED,MAAM,CAACA,MAAP,CAAcE,KAHrB;AAIA,IAAA,QAAQ,EAAEF,MAAM,CAACA,MAAP,CAAcG,QAJxB;AAKA,IAAA,WAAW,EAAGH,MAAM,CAACA,MAAP,CAAcI,WAL5B,CAKyC;AALzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,CADL,MARJ,CADJ;AAyBH,CAlED;;AAsEA,eAAe9B,GAAf","sourcesContent":["import React,{useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\nimport Car from './Car';\r\n\r\n\r\n//this below is our component that returns JSX to index.html \r\nconst App = () => { //arrow function \r\n    \r\n    const [recipes, setRecipes] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [query, setQuery] = useState(\"\");\r\n\r\n\r\n    const APP_ID = \"2bab79b6\";\r\n    const APP_KEY = \"c1d160425afb987dbf03072f5969f971\";\r\n    const URL = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\r\n\r\n    \r\n    const getRecipes = async () => {\r\n        const response = await fetch(URL);\r\n        const data = await response.json();\r\n\r\n        //the line below adds data.hits array to state set Recipes\r\n        setRecipes(data.hits); //data.hit pulls out hits from data fetched from api cz thats where our recipes are\r\n        console.log(data.hits);\r\n    };\r\n\r\n\r\n    //This function takes an arrow fuction\r\n    //it helps as it will run only once wen the page opens or is refreshed\r\n    //page is renderd only once because we add 2nd agr to the function which is [] and if empty this funct only runs once\r\n    useEffect(() => {\r\n        getRecipes();\r\n    }, [query]); // wecan add state in the 2nd arg [] to tell react to refresh when when state is in curtain condition. eg True or False\r\n\r\n\r\n    const updateSearch = e =>{\r\n        setSearch(e.target.value); \r\n    };\r\n\r\n    //the below funct is going to capture query from form input\r\n    const getSearch = e => {\r\n        e.preventDefault(); //prevents page reload after form submission\r\n        setQuery(search);\r\n    };\r\n\r\n\r\n    return(\r\n        <div className=\"\">\r\n\r\n            <form className=\"search-form\" onSubmit={getSearch}>\r\n                <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search Recipe\"/>\r\n                <button onClick={useEffect} className=\"search-btn\" type=\"submit\"> Search Recipe</button>\r\n            </form>\r\n            <hr/>\r\n\r\n            <div className=\"recipes\">\r\n                {recipes.map( recipe => (   //we are mapping through state to get individual recipe then render Recipe with all info frm api call         \r\n                \r\n                <Recipe // Recipe component\r\n                key={recipe.recipe.label}\r\n                title={recipe.recipe.label} \r\n                image={recipe.recipe.image} \r\n                calories={recipe.recipe.calories}\r\n                ingridients ={recipe.recipe.ingredients} //this is an array of ingridients\r\n                />\r\n\r\n                ))};\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}